.TH "textwolf::XMLScannerBase" 3 "14 Aug 2011" "textwolf" \" -*- nroff -*-
.ad l
.nh
.SH NAME
textwolf::XMLScannerBase \- 
.PP
XML scanner base class for things common for all XML scanners.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <textwolf.hpp>\fP
.PP
Inherited by \fBtextwolf::XMLScanner< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer_, EntityMap_ >\fP, and \fBtextwolf::XMLScanner< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer, EntityMap_ >\fP.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBIsContentCharMap\fP"
.br
.RI "\fIDefines the set of content token characters. \fP"
.ti -1c
.RI "class \fBIsDQStringCharMap\fP"
.br
.RI "\fIDefines the set characters belonging to a double quoted string. \fP"
.ti -1c
.RI "class \fBIsSQStringCharMap\fP"
.br
.RI "\fIDefines the set characters belonging to a single quoted string. \fP"
.ti -1c
.RI "class \fBIsTagCharMap\fP"
.br
.RI "\fIDefines the set of tag characters. \fP"
.ti -1c
.RI "class \fBStatemachine\fP"
.br
.RI "\fIXML scanner state machine implementation. \fP"
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBElementType\fP { \fBNone\fP, \fBErrorOccurred\fP, \fBHeaderStart\fP, \fBHeaderAttribName\fP, \fBHeaderAttribValue\fP, \fBHeaderEnd\fP, \fBTagAttribName\fP, \fBTagAttribValue\fP, \fBOpenTag\fP, \fBCloseTag\fP, \fBCloseTagIm\fP, \fBContent\fP, \fBExit\fP }"
.br
.RI "\fIEnumeration of XML element types returned by an XML scanner. \fP"
.ti -1c
.RI "enum { \fBNofElementTypes\fP = Exit+1 }"
.br
.ti -1c
.RI "enum \fBError\fP { \fBOk\fP, \fBErrExpectedOpenTag\fP, \fBErrExpectedXMLTag\fP, \fBErrUnexpectedEndOfText\fP, \fBErrOutputBufferTooSmall\fP, \fBErrSyntaxToken\fP, \fBErrStringNotTerminated\fP, \fBErrUndefinedCharacterEntity\fP, \fBErrExpectedTagEnd\fP, \fBErrExpectedEqual\fP, \fBErrExpectedTagAttribute\fP, \fBErrExpectedCDATATag\fP, \fBErrInternal\fP, \fBErrUnexpectedEndOfInput\fP, \fBErrExpectedEndOfLine\fP }"
.br
.RI "\fIEnumeration of XML scanner error codes. \fP"
.ti -1c
.RI "enum \fBSTMState\fP { \fBSTART\fP, \fBSTARTTAG\fP, \fBXTAG\fP, \fBXTAGEND\fP, \fBXTAGEOLN\fP, \fBXTAGDONE\fP, \fBXTAGAISK\fP, \fBXTAGANAM\fP, \fBXTAGAESK\fP, \fBXTAGAVSK\fP, \fBXTAGAVID\fP, \fBXTAGAVSQ\fP, \fBXTAGAVDQ\fP, \fBXTAGAVQE\fP, \fBCONTENT\fP, \fBTOKEN\fP, \fBXMLTAG\fP, \fBOPENTAG\fP, \fBCLOSETAG\fP, \fBTAGCLSK\fP, \fBTAGAISK\fP, \fBTAGANAM\fP, \fBTAGAESK\fP, \fBTAGAVSK\fP, \fBTAGAVID\fP, \fBTAGAVSQ\fP, \fBTAGAVDQ\fP, \fBTAGAVQE\fP, \fBTAGCLIM\fP, \fBENTITYSL\fP, \fBENTITY\fP, \fBCDATA\fP, \fBCDATA1\fP, \fBCDATA2\fP, \fBCDATA3\fP, \fBEXIT\fP }"
.br
.RI "\fIEnumeration of states of the XML scanner state machine. \fP"
.ti -1c
.RI "enum \fBSTMAction\fP { \fBReturn\fP, \fBReturnToken\fP, \fBReturnIdentifier\fP, \fBReturnSQString\fP, \fBReturnDQString\fP, \fBExpectIdentifierXML\fP, \fBExpectIdentifierCDATA\fP, \fBReturnEOF\fP, \fBNofSTMActions\fP =  8 }"
.br
.RI "\fIEnumeration of actions in the XML scanner state machine. \fP"
.ti -1c
.RI "typedef \fBCharMap\fP< bool, false, NofControlCharacter > \fBIsTokenCharMap\fP"
.br
.RI "\fIForms a set of characters by assigning (true/false) to the whole domain. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const char * \fBgetElementTypeName\fP (\fBElementType\fP ee)"
.br
.RI "\fIGet the XML element type as string. \fP"
.ti -1c
.RI "static const char * \fBgetErrorString\fP (\fBError\fP ee)"
.br
.RI "\fIGet the error code as string. \fP"
.ti -1c
.RI "static const char * \fBgetStateString\fP (\fBSTMState\fP s)"
.br
.RI "\fIGet the scanner state machine state as string. \fP"
.ti -1c
.RI "static const char * \fBgetActionString\fP (\fBSTMAction\fP a)"
.br
.RI "\fIGet the scanner state machine action as string. \fP"
.in -1c
.SH "Detailed Description"
.PP 
XML scanner base class for things common for all XML scanners. 
.SH "Member Typedef Documentation"
.PP 
.SS "\fBtextwolf::XMLScannerBase::IsTokenCharMap\fP"
.PP
Forms a set of characters by assigning (true/false) to the whole domain. 
.SH "Member Enumeration Documentation"
.PP 
.SS "anonymous enum"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fINofElementTypes \fP\fP
number of XML element types defined 
.SS "enum \fBtextwolf::XMLScannerBase::ElementType\fP"
.PP
Enumeration of XML element types returned by an XML scanner. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fINone \fP\fP
empty (NULL) 
.TP
\fB\fIErrorOccurred \fP\fP
XML scanning error error reported. 
.TP
\fB\fIHeaderStart \fP\fP
open XML header tag 
.TP
\fB\fIHeaderAttribName \fP\fP
tag attribute name in the XML header 
.TP
\fB\fIHeaderAttribValue \fP\fP
tag attribute value in the XML header 
.TP
\fB\fIHeaderEnd \fP\fP
end of XML header event (after parsing '?>') 
.TP
\fB\fITagAttribName \fP\fP
tag attribute name (e.g. 'id' in <person id='5'> 
.TP
\fB\fITagAttribValue \fP\fP
tag attribute value (e.g. '5' in <person id='5'> 
.TP
\fB\fIOpenTag \fP\fP
open tag (e.g. 'bla' for '&lt;bla...') 
.TP
\fB\fICloseTag \fP\fP
close tag (e.g. 'bla' for '&lt;/bla&gt;') 
.TP
\fB\fICloseTagIm \fP\fP
immediate close tag (e.g. 'bla' for '&lt;bla /&gt;') 
.TP
\fB\fIContent \fP\fP
content element string (separated by spaces or end of line) 
.TP
\fB\fIExit \fP\fP
end of document 
.SS "enum \fBtextwolf::XMLScannerBase::Error\fP"
.PP
Enumeration of XML scanner error codes. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIOk \fP\fP
no error, everything is OK 
.TP
\fB\fIErrExpectedOpenTag \fP\fP
expected an open tag in this state 
.TP
\fB\fIErrExpectedXMLTag \fP\fP
expected an <?xml tag in this state 
.TP
\fB\fIErrUnexpectedEndOfText \fP\fP
unexpected end of text in the middle of the XML definition 
.TP
\fB\fIErrOutputBufferTooSmall \fP\fP
scaned element in XML to big to fit in the buffer provided for it 
.TP
\fB\fIErrSyntaxToken \fP\fP
a specific string expected as token in XML but does not match 
.TP
\fB\fIErrStringNotTerminated \fP\fP
attribute string in XML not terminated on the same line 
.TP
\fB\fIErrUndefinedCharacterEntity \fP\fP
named entity is not defined in the entity map 
.TP
\fB\fIErrExpectedTagEnd \fP\fP
expected end of tag 
.TP
\fB\fIErrExpectedEqual \fP\fP
expected equal in tag attribute definition 
.TP
\fB\fIErrExpectedTagAttribute \fP\fP
expected tag attribute 
.TP
\fB\fIErrExpectedCDATATag \fP\fP
expected CDATA tag definition 
.TP
\fB\fIErrInternal \fP\fP
internal error (textwolf implementation error) 
.TP
\fB\fIErrUnexpectedEndOfInput \fP\fP
unexpected end of input stream 
.TP
\fB\fIErrExpectedEndOfLine \fP\fP
expected mandatory end of line (after XML header) 
.SS "enum \fBtextwolf::XMLScannerBase::STMAction\fP"
.PP
Enumeration of actions in the XML scanner state machine. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIReturn \fP\fP
.TP
\fB\fIReturnToken \fP\fP
.TP
\fB\fIReturnIdentifier \fP\fP
.TP
\fB\fIReturnSQString \fP\fP
.TP
\fB\fIReturnDQString \fP\fP
.TP
\fB\fIExpectIdentifierXML \fP\fP
.TP
\fB\fIExpectIdentifierCDATA \fP\fP
.TP
\fB\fIReturnEOF \fP\fP
.TP
\fB\fINofSTMActions \fP\fP

.SS "enum \fBtextwolf::XMLScannerBase::STMState\fP"
.PP
Enumeration of states of the XML scanner state machine. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fISTART \fP\fP
.TP
\fB\fISTARTTAG \fP\fP
.TP
\fB\fIXTAG \fP\fP
.TP
\fB\fIXTAGEND \fP\fP
.TP
\fB\fIXTAGEOLN \fP\fP
.TP
\fB\fIXTAGDONE \fP\fP
.TP
\fB\fIXTAGAISK \fP\fP
.TP
\fB\fIXTAGANAM \fP\fP
.TP
\fB\fIXTAGAESK \fP\fP
.TP
\fB\fIXTAGAVSK \fP\fP
.TP
\fB\fIXTAGAVID \fP\fP
.TP
\fB\fIXTAGAVSQ \fP\fP
.TP
\fB\fIXTAGAVDQ \fP\fP
.TP
\fB\fIXTAGAVQE \fP\fP
.TP
\fB\fICONTENT \fP\fP
.TP
\fB\fITOKEN \fP\fP
.TP
\fB\fIXMLTAG \fP\fP
.TP
\fB\fIOPENTAG \fP\fP
.TP
\fB\fICLOSETAG \fP\fP
.TP
\fB\fITAGCLSK \fP\fP
.TP
\fB\fITAGAISK \fP\fP
.TP
\fB\fITAGANAM \fP\fP
.TP
\fB\fITAGAESK \fP\fP
.TP
\fB\fITAGAVSK \fP\fP
.TP
\fB\fITAGAVID \fP\fP
.TP
\fB\fITAGAVSQ \fP\fP
.TP
\fB\fITAGAVDQ \fP\fP
.TP
\fB\fITAGAVQE \fP\fP
.TP
\fB\fITAGCLIM \fP\fP
.TP
\fB\fIENTITYSL \fP\fP
.TP
\fB\fIENTITY \fP\fP
.TP
\fB\fICDATA \fP\fP
.TP
\fB\fICDATA1 \fP\fP
.TP
\fB\fICDATA2 \fP\fP
.TP
\fB\fICDATA3 \fP\fP
.TP
\fB\fIEXIT \fP\fP

.SH "Member Function Documentation"
.PP 
.SS "static const char* textwolf::XMLScannerBase::getActionString (\fBSTMAction\fP a)\fC [inline, static]\fP"
.PP
Get the scanner state machine action as string. \fBParameters:\fP
.RS 4
\fIa\fP the action 
.RE
.PP
\fBReturns:\fP
.RS 4
the action as string 
.RE
.PP

.SS "static const char* textwolf::XMLScannerBase::getElementTypeName (\fBElementType\fP ee)\fC [inline, static]\fP"
.PP
Get the XML element type as string. \fBParameters:\fP
.RS 4
\fIee\fP XML element type 
.RE
.PP
\fBReturns:\fP
.RS 4
XML element type as string 
.RE
.PP

.SS "static const char* textwolf::XMLScannerBase::getErrorString (\fBError\fP ee)\fC [inline, static]\fP"
.PP
Get the error code as string. \fBParameters:\fP
.RS 4
\fIee\fP error code 
.RE
.PP
\fBReturns:\fP
.RS 4
the error code as string 
.RE
.PP

.SS "static const char* textwolf::XMLScannerBase::getStateString (\fBSTMState\fP s)\fC [inline, static]\fP"
.PP
Get the scanner state machine state as string. \fBParameters:\fP
.RS 4
\fIs\fP the state 
.RE
.PP
\fBReturns:\fP
.RS 4
the state as string 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for textwolf from the source code.
