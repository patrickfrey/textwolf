.TH "textwolf::XMLPathSelectAutomaton::PathElement" 3 "10 Jun 2011" "textwolf" \" -*- nroff -*-
.ad l
.nh
.SH NAME
textwolf::XMLPathSelectAutomaton::PathElement \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <textwolf.hpp>\fP
.PP
Inherits \fBtextwolf::throws_exception\fP.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBRange\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPathElement\fP ()"
.br
.ti -1c
.RI "\fBPathElement\fP (\fBXMLPathSelectAutomaton\fP *p_xs, int p_si=0)"
.br
.ti -1c
.RI "\fBPathElement\fP (const \fBPathElement\fP &orig)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBoperator--\fP (int)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBoperator[]\fP (const char *name)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBselectTag\fP (const char *name)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBoperator()\fP (const char *name)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBselectAttribute\fP (const char *name)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBoperator()\fP (const char *name, const char *value)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBifAttribute\fP (const char *name, const char *value)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBTO\fP (int cnt)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBFROM\fP (int cnt)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBRANGE\fP (int cnt)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBoperator=\fP (int type)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBassignType\fP (int type)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBoperator()\fP ()  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBselectContent\fP ()  throw (exception)"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "enum { \fBMaxSize\fP = 1024 }"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBPathElement\fP & \fBdefineOutput\fP (\fBOperation\fP op)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBdoSelect\fP (\fBOperation\fP op, const char *value)  throw (exception)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBdoFollow\fP ()"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBdoRange\fP (int p_start, int p_end)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBdoCount\fP (int p_count)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBdoStart\fP (int p_start)"
.br
.ti -1c
.RI "\fBPathElement\fP & \fBpush\fP (int typeidx)  throw (exception)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBXMLPathSelectAutomaton\fP * \fBxs\fP"
.br
.ti -1c
.RI "int \fBstateidx\fP"
.br
.ti -1c
.RI "\fBRange\fP \fBrange\fP"
.br
.ti -1c
.RI "bool \fBfollow\fP"
.br
.ti -1c
.RI "\fBMask\fP \fBpushOpMask\fP"
.br
.ti -1c
.RI "\fBMask\fP \fBprintOpMask\fP"
.br
.in -1c

.SS "template<class CharSet_ = charset::UTF8> struct textwolf::XMLPathSelectAutomaton< CharSet_ >::PathElement"

.SH "Member Enumeration Documentation"
.PP 
.SS "template<class CharSet_  = charset::UTF8> anonymous enum\fC [private]\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMaxSize \fP\fP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class CharSet_  = charset::UTF8> \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::PathElement ()\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::PathElement (\fBXMLPathSelectAutomaton\fP * p_xs, int p_si = \fC0\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::PathElement (const \fBPathElement\fP & orig)\fC [inline]\fP"
.SH "Member Function Documentation"
.PP 
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::assignType (int type)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::defineOutput (\fBOperation\fP op)\fC [inline, private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::doCount (int p_count)\fC [inline, private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::doFollow ()\fC [inline, private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::doRange (int p_start, int p_end)\fC [inline, private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::doSelect (\fBOperation\fP op, const char * value)  throw (\fBexception\fP)\fC [inline, private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::doStart (int p_start)\fC [inline, private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::FROM (int cnt)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::ifAttribute (const char * name, const char * value)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::operator() ()  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::operator() (const char * name, const char * value)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::operator() (const char * name)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::operator-- (int)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::operator= (int type)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::operator[] (const char * name)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::push (int typeidx)  throw (\fBexception\fP)\fC [inline, private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::RANGE (int cnt)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::selectAttribute (const char * name)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::selectContent ()  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::selectTag (const char * name)  throw (\fBexception\fP)\fC [inline]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBPathElement\fP& \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::PathElement::TO (int cnt)  throw (\fBexception\fP)\fC [inline]\fP"
.SH "Member Data Documentation"
.PP 
.SS "template<class CharSet_  = charset::UTF8> bool \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::\fBPathElement::follow\fP\fC [private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBMask\fP \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::\fBPathElement::printOpMask\fP\fC [private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBMask\fP \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::\fBPathElement::pushOpMask\fP\fC [private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBRange\fP \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::\fBPathElement::range\fP\fC [private]\fP"
.SS "template<class CharSet_  = charset::UTF8> int \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::\fBPathElement::stateidx\fP\fC [private]\fP"
.SS "template<class CharSet_  = charset::UTF8> \fBXMLPathSelectAutomaton\fP* \fBtextwolf::XMLPathSelectAutomaton\fP< CharSet_ >::\fBPathElement::xs\fP\fC [private]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for textwolf from the source code.
