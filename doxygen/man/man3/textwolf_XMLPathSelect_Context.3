.TH "textwolf::XMLPathSelect::Context" 3 "14 Aug 2011" "textwolf" \" -*- nroff -*-
.ad l
.nh
.SH NAME
textwolf::XMLPathSelect::Context \- 
.PP
\fBState\fP variables without stacks of the automaton.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBContext\fP ()"
.br
.RI "\fIConstructor. \fP"
.ti -1c
.RI "void \fBinit\fP (\fBXMLScannerBase::ElementType\fP p_type, const char *p_key, int p_keysize)"
.br
.RI "\fIInitialization. \fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBXMLScannerBase::ElementType\fP \fBtype\fP"
.br
.RI "\fIelement type processed \fP"
.ti -1c
.RI "const char * \fBkey\fP"
.br
.RI "\fIstring value of element processed \fP"
.ti -1c
.RI "unsigned int \fBkeysize\fP"
.br
.RI "\fIsize of string value in bytes of element processed \fP"
.ti -1c
.RI "\fBScope\fP \fBscope\fP"
.br
.RI "\fIactive scope \fP"
.ti -1c
.RI "unsigned int \fBscope_iter\fP"
.br
.RI "\fIposition of currently visited token in the active scope \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class InputIterator, class InputCharSet_, class OutputCharSet_, class OutputBuffer_, class EntityMap_ = std::map<const char*,UChar>> class textwolf::XMLPathSelect< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer_, EntityMap_ >::Context"
\fBState\fP variables without stacks of the automaton. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class InputIterator , class InputCharSet_ , class OutputCharSet_ , class OutputBuffer_ , class EntityMap_  = std::map<const char*,UChar>> \fBtextwolf::XMLPathSelect\fP< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer_, EntityMap_ >::Context::Context ()\fC [inline]\fP"
.PP
Constructor. 
.SH "Member Function Documentation"
.PP 
.SS "template<class InputIterator , class InputCharSet_ , class OutputCharSet_ , class OutputBuffer_ , class EntityMap_  = std::map<const char*,UChar>> void \fBtextwolf::XMLPathSelect\fP< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer_, EntityMap_ >::Context::init (\fBXMLScannerBase::ElementType\fP p_type, const char * p_key, int p_keysize)\fC [inline]\fP"
.PP
Initialization. \fBParameters:\fP
.RS 4
\fIp_type\fP type of the current element processed 
.br
\fIp_key\fP current element processed 
.br
\fIp_keysize\fP size of the key in bytes 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<class InputIterator , class InputCharSet_ , class OutputCharSet_ , class OutputBuffer_ , class EntityMap_  = std::map<const char*,UChar>> const char* \fBtextwolf::XMLPathSelect\fP< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer_, EntityMap_ >::\fBContext::key\fP"
.PP
string value of element processed 
.SS "template<class InputIterator , class InputCharSet_ , class OutputCharSet_ , class OutputBuffer_ , class EntityMap_  = std::map<const char*,UChar>> unsigned int \fBtextwolf::XMLPathSelect\fP< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer_, EntityMap_ >::\fBContext::keysize\fP"
.PP
size of string value in bytes of element processed 
.SS "template<class InputIterator , class InputCharSet_ , class OutputCharSet_ , class OutputBuffer_ , class EntityMap_  = std::map<const char*,UChar>> \fBScope\fP \fBtextwolf::XMLPathSelect\fP< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer_, EntityMap_ >::\fBContext::scope\fP"
.PP
active scope 
.SS "template<class InputIterator , class InputCharSet_ , class OutputCharSet_ , class OutputBuffer_ , class EntityMap_  = std::map<const char*,UChar>> unsigned int \fBtextwolf::XMLPathSelect\fP< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer_, EntityMap_ >::\fBContext::scope_iter\fP"
.PP
position of currently visited token in the active scope 
.SS "template<class InputIterator , class InputCharSet_ , class OutputCharSet_ , class OutputBuffer_ , class EntityMap_  = std::map<const char*,UChar>> \fBXMLScannerBase::ElementType\fP \fBtextwolf::XMLPathSelect\fP< InputIterator, InputCharSet_, OutputCharSet_, OutputBuffer_, EntityMap_ >::\fBContext::type\fP"
.PP
element type processed 

.SH "Author"
.PP 
Generated automatically by Doxygen for textwolf from the source code.
