.TH "textwolf" 3 "11 Jun 2011" "textwolf" \" -*- nroff -*-
.ad l
.nh
.SH NAME
textwolf \- 
.PP
Toplevel namespace of the library.  

.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBcharset\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBthrows_exception\fP"
.br
.RI "\fIBase class for structures that can throw exceptions for non recoverable errors in the automata definition. \fP"
.ti -1c
.RI "class \fBexception\fP"
.br
.RI "\fItextwolf exception class \fP"
.ti -1c
.RI "class \fBCharMap\fP"
.br
.RI "\fICharacter map for fast typing of a character byte. \fP"
.ti -1c
.RI "class \fBControlCharacterM\fP"
.br
.RI "\fIMap of the enumeration of control characters to their names for debug messages. \fP"
.ti -1c
.RI "class \fBTextScanner\fP"
.br
.RI "\fIReader for scanning the input character by character. \fP"
.ti -1c
.RI "class \fBScannerStatemachine\fP"
.br
.RI "\fIClass to build up the XML element scanner state machine in a descriptive way. \fP"
.ti -1c
.RI "class \fBXMLScannerBase\fP"
.br
.RI "\fIXML scanner base class for things common for all XML scanners. \fP"
.ti -1c
.RI "class \fBXMLScanner\fP"
.br
.RI "\fIXML scanner template that adds the functionality to the statemachine base definition. \fP"
.ti -1c
.RI "class \fBXMLPathSelectAutomaton\fP"
.br
.RI "\fIAutomaton to define XML path expressions and assign types (int values) to them. \fP"
.ti -1c
.RI "class \fBXMLPathSelect\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef boost::uint32_t \fBUChar\fP"
.br
.RI "\fIUnicode character type. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBControlCharacter\fP { \fBUndef\fP = 0, \fBEndOfText\fP, \fBEndOfLine\fP, \fBCntrl\fP, \fBSpace\fP, \fBAmp\fP, \fBLt\fP, \fBEqual\fP, \fBGt\fP, \fBSlash\fP, \fBExclam\fP, \fBQuestm\fP, \fBSq\fP, \fBDq\fP, \fBOsb\fP, \fBCsb\fP, \fBAny\fP, \fBNofControlCharacter\fP = 17 }"
.br
.RI "\fIEnumeration of control characters needed as events for XML scanner statemachine. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Toplevel namespace of the library. 

--------------------------------------------------------------------- The template library textwolf implements an input iterator on a set of XML path expressions without backward references on an STL conforming input iterator as source. It does no buffering or read ahead and is dedicated for stream processing of XML for a small set of XML queries. Stream processing in this context refers to processing the document without buffering anything but the current result token processed with its tag hierarchy information.
.PP
Copyright (C) 2010 Patrick Frey
.PP
This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.
.PP
This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
.PP
You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
.PP
--------------------------------------------------------------------
.PP
The latest version of textwolf can be found at 'http://github.com/patrickfrey/textwolf' For documentation see 'http://patrickfrey.github.com/textwolf'
.PP
-------------------------------------------------------------------- 
.SH "Author"
.PP 
Generated automatically by Doxygen for textwolf from the source code.
